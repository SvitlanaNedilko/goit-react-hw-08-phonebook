{"version":3,"sources":["redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","redux/contacts/contacts-operations.js","components/Filter/Filter.js","components/ContactList/ContactList.js","views/contactsViews/contactViews.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js"],"names":["getContacts","state","contacts","contactItems","getFilter","filter","getLoading","loading","getVisibleContacts","createSelector","allContacts","normalizedFilter","toLowerCase","contact","name","includes","ContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","nameInputId","shortid","generate","numberInputId","className","onSubmit","e","preventDefault","find","alert","actions","addContactRequest","axios","post","then","data","addContactSuccess","catch","error","addContactError","htmlFor","type","pattern","title","required","value","onChange","event","currentTarget","id","Filter","contactsAction","changeFilter","ContactList","onDeleteContact","contactId","onDeleteContactRequest","delete","onDeleteContactSuccess","onDeleteContactError","useEffect","a","fatchContactRequest","get","fatchContactSuccess","fatchContactError","message","length","map","onClick","ContactsView","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","unsupportedIterableToArray","TypeError","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","Error","unique","split","item","ind","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","splice","shuffle","module","exports","characters","seed","lookup","index","build","isValid","clusterWorkerId","seedValue","worker","workerId","newCharacters","_seed_","counter","previousSeconds","str","seconds","Date","now","random","format","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","mask","log","LN2","step","RegExp","replace","test"],"mappings":"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","file":"static/js/3.2492f48a.chunk.js","sourcesContent":["import { createSelector } from 'reselect'\r\n\r\nexport const getContacts = (state) => state.contacts.contactItems\r\nexport const getFilter = (state) => state.contacts.filter\r\nexport const getLoading = (state) => state.contacts.loading\r\n\r\n// export const getVisibleContacts = (state) => {\r\n//   const filter = getFilter(state)\r\n//   const allContacts = getContacts(state)\r\n//   const normalizedFilter = filter.toLowerCase()\r\n//   return allContacts.filter((contact) =>\r\n//     contact.name.toLowerCase().includes(normalizedFilter)\r\n//   )\r\n// }\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getFilter, getContacts],\r\n  (filter, allContacts) => {\r\n    const normalizedFilter = filter.toLowerCase()\r\n    return allContacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normalizedFilter)\r\n    )\r\n  }\r\n)\r\n","import React, { useState } from 'react'\r\nimport shortid from 'shortid'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { addContact, getContacts } from '../../redux'\r\nimport './ContactForm.scss'\r\n\r\nexport default function ContactForm() {\r\n  const [name, setName] = useState('')\r\n  const [number, setNumber] = useState('')\r\n  const contacts = useSelector(getContacts)\r\n  const dispatch = useDispatch()\r\n\r\n  const nameInputId = shortid.generate()\r\n  const numberInputId = shortid.generate()\r\n\r\n  const handleInputChangeName = (event) => {\r\n    setName(event.currentTarget.value)\r\n  }\r\n\r\n  const handleInputChangeNumber = (event) => {\r\n    setNumber(event.currentTarget.value)\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n\r\n    const isPresentName = contacts.find(\r\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n    )\r\n    if (isPresentName) {\r\n      alert(`${name} is already in contacts`)\r\n    } else {\r\n      dispatch(addContact({ name, number }))\r\n    }\r\n    setName('')\r\n    setNumber('')\r\n  }\r\n\r\n  return (\r\n    <form className=\"ContactForm\" onSubmit={handleSubmit}>\r\n      <label className=\"ContactForm_Input\" htmlFor={nameInputId}>\r\n        Имя\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          value={name}\r\n          onChange={handleInputChangeName}\r\n          id={nameInputId}\r\n        />\r\n      </label>\r\n      <label className=\"ContactForm_Input\" htmlFor={numberInputId}>\r\n        Телефон\r\n        <input\r\n          type=\"text\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          value={number}\r\n          onChange={handleInputChangeNumber}\r\n          id={numberInputId}\r\n        />\r\n      </label>\r\n      <button type=\"submit\">Add contact</button>\r\n    </form>\r\n  )\r\n}\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   onSubmit: (contact) => dispatch(contactActions.addContact(contact)),\r\n// })\r\n// export default connect(null, mapDispatchToProps)(ContactForm)\r\n","import axios from 'axios'\r\nimport actions from './contacts-action'\r\n\r\n// axios.defaults.baseURL = 'http://localhost:3004'\r\n\r\nexport const fatchContact = () => async (dispatch) => {\r\n  dispatch(actions.fatchContactRequest())\r\n  try {\r\n    const { data } = await axios.get('/contacts')\r\n    dispatch(actions.fatchContactSuccess(data))\r\n  } catch (error) {\r\n    dispatch(actions.fatchContactError(error.message))\r\n  }\r\n  // const response = await axios\r\n  //   .get('/contacts')\r\n  //   .then(({ data }) => dispatch(actions.fatchContactSuccess(data)))\r\n  //   .catch((arror) => dispatch(actions.fatchConta                                 ctError(arror)))\r\n}\r\n\r\nexport const addContact = (contact) => (dispatch) => {\r\n  dispatch(actions.addContactRequest())\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n    .catch((error) => dispatch(actions.addContactError(error)))\r\n}\r\n\r\nexport const deleteContact = (contactId) => (dispatch) => {\r\n  dispatch(actions.onDeleteContactRequest())\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(actions.onDeleteContactSuccess(contactId)))\r\n    .catch((error) => dispatch(actions.onDeleteContactError(error)))\r\n}\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { contactsAction, getFilter } from '../../redux'\r\nimport './Filter.scss'\r\n\r\nconst Filter = () => {\r\n  const filter = useSelector(getFilter)\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <label className=\"Filter_Input\">\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        value={filter}\r\n        onChange={(event) =>\r\n          dispatch(contactsAction.changeFilter(event.currentTarget.value))\r\n        }\r\n      />\r\n    </label>\r\n  )\r\n}\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   filter: state.contacts.filter,\r\n// })\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   changeFilter: (event) =>\r\n//     dispatch(contactActions.changeFilter(event.currentTarget.value)),\r\n// })\r\n\r\nexport default Filter\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { getVisibleContacts, deleteContact, fatchContact } from '../../redux'\r\nimport './ContactList.scss'\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector(getVisibleContacts)\r\n  const dispatch = useDispatch()\r\n  const onDeleteContact = (id) => dispatch(deleteContact(id))\r\n\r\n  useEffect(() => {\r\n    dispatch(fatchContact())\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <ul className=\"ContactList\">\r\n      {!!contacts.length &&\r\n        contacts.map(({ id, name, number }) => (\r\n          <li className=\"ContactList_Item\" key={id}>\r\n            <p className=\"ContactList_Name\">{name}</p>\r\n            <p>{number}</p>\r\n            <button onClick={() => onDeleteContact(id)}>Delete</button>\r\n          </li>\r\n        ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default ContactList\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport ContactForm from '../../components/ContactForm/ContactForm'\r\nimport { getLoading } from '../../redux/contacts/contacts-selectors'\r\nimport Filter from '../../components/Filter/Filter'\r\nimport ContactList from '../../components/ContactList/ContactList'\r\n\r\nexport default function ContactsView() {\r\n  const loading = useSelector(getLoading)\r\n\r\n  return (\r\n    <>\r\n      <h2 className=\"AppTitle\">Contacts</h2>\r\n      <ContactForm />\r\n      <Filter />\r\n      {loading && <h2>Загружаем...</h2>}\r\n      <ContactList />\r\n    </>\r\n  )\r\n}\r\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n"],"sourceRoot":""}